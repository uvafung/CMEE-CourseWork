cluster_run(0.1, 100, 3, 1,
10, 200, "my_test_file_1.rda")
load("/Users/Uva/Documents/CMEECourseWork/HPC/code/my_test_file_1.rda")
View(input_para)
View(input_para)
# Question 17
cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
starting_com <- init_community_min(size)
wall_time_sec = wall_time * 60
gen = 0
start_time <- proc.time()[["elapsed"]]
while ((proc.time()[["elapsed"]] - start_time) < wall_time_sec ){
starting_com <- neutral_generation_speciation(starting_com, speciation_rate)
gen <- gen +1
if (gen <= burn_in_generations){ # within burn-in period
if (gen %% interval_rich == 0){
interval_spp_richness <- species_richness(starting_com)
time_series_burnin <- neutral_time_series_speciation(starting_com, speciation_rate, burn_in_generations)
}
else{ # exceed burn-in period
break
}
}
if (gen %% interval_oct == 0){ # throughout the whole simulation
spp_abun <- species_abundance(starting_com)
interval_spp_abun_oct <- list(octaves(spp_abun))
}
else{
break
}
}
end_time <- proc.time()[["elapsed"]]
time_spent <- end_time - start_time
save(time_series_burnin, interval_spp_richness, interval_spp_abun_oct, starting_com, time_spent,
speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations,
file = output_file_name)
}
source("~/Documents/CMEECourseWork/HPC/code/uf21_HPC_2021.R")
# Question 17
cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
starting_com <- init_community_min(size)
wall_time_sec = wall_time * 60
gen = 0
start_time <- proc.time()[["elapsed"]]
while ((proc.time()[["elapsed"]] - start_time) < wall_time_sec ){
starting_com <- neutral_generation_speciation(starting_com, speciation_rate)
gen <- gen +1
if (gen <= burn_in_generations){ # within burn-in period
if (gen %% interval_rich == 0){
interval_spp_richness <- species_richness(starting_com)
time_series_burnin <- neutral_time_series_speciation(starting_com, speciation_rate, burn_in_generations)
}
else{ # exceed burn-in period
break
}
}
if (gen %% interval_oct == 0){ # throughout the whole simulation
spp_abun <- species_abundance(starting_com)
interval_spp_abun_oct <- list(octaves(spp_abun))
}
else{
break
}
}
end_time <- proc.time()[["elapsed"]]
time_spent <- end_time - start_time
save(time_series_burnin, interval_spp_richness, interval_spp_abun_oct, starting_com, time_spent,
speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations,
file = output_file_name)
}
source("~/Documents/CMEECourseWork/HPC/code/uf21_HPC_2021.R")
source("~/Documents/CMEECourseWork/HPC/code/uf21/uf21_HPC_2021_main.R")
source("~/Documents/CMEECourseWork/HPC/code/uf21_HPC_2021.R")
# Question 17
cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
starting_com <- init_community_min(size)
wall_time_sec = wall_time * 60
gen = 0
start_time <- proc.time()[["elapsed"]]
interval_spp_abun_oct <- c()
while ((proc.time()[["elapsed"]] - start_time) < wall_time_sec ){
starting_com <- neutral_generation_speciation(starting_com, speciation_rate)
gen <- gen +1
if (gen <= burn_in_generations){ # within burn-in period
if (gen %% interval_rich == 0){
interval_spp_richness <- species_richness(starting_com)
time_series_burnin <- neutral_time_series_speciation(starting_com, speciation_rate, burn_in_generations)
}
else{ # exceed burn-in period
break
}
}
if (gen %% interval_oct == 0){ # throughout the whole simulation
spp_abun <- species_abundance(starting_com)
interval_spp_abun_oct <- list(octaves(spp_abun))
}
else{
break
}
}
end_time <- proc.time()[["elapsed"]]
time_spent <- end_time - start_time
save(time_series_burnin, interval_spp_richness, interval_spp_abun_oct, starting_com, time_spent,
speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations,
file = output_file_name)
}
source("~/Documents/CMEECourseWork/HPC/code/uf21/uf21_HPC_2021_main.R")
source("~/Documents/CMEECourseWork/HPC/code/uf21_HPC_2021.R")
# Question 17
cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
starting_com <- init_community_min(size)
wall_time_sec = wall_time * 60
gen = 0
start_time <- proc.time()[["elapsed"]]
interval_spp_abun_oct <- c()
interval_rich <- interval_rich
while ((proc.time()[["elapsed"]] - start_time) < wall_time_sec ){
starting_com <- neutral_generation_speciation(starting_com, speciation_rate)
gen <- gen +1
if (gen <= burn_in_generations){ # within burn-in period
if (gen %% interval_rich == 0){
interval_spp_richness <- species_richness(starting_com)
time_series_burnin <- neutral_time_series_speciation(starting_com, speciation_rate, burn_in_generations)
}
else{ # exceed burn-in period
break
}
}
if (gen %% interval_oct == 0){ # throughout the whole simulation
spp_abun <- species_abundance(starting_com)
interval_spp_abun_oct <- list(octaves(spp_abun))
}
else{
break
}
}
end_time <- proc.time()[["elapsed"]]
time_spent <- end_time - start_time
save(time_series_burnin, interval_spp_richness, interval_spp_abun_oct, starting_com, time_spent,
speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations,
file = output_file_name)
}
source("~/Documents/CMEECourseWork/HPC/code/uf21/uf21_HPC_2021_main.R")
source("~/Documents/CMEECourseWork/HPC/code/uf21_HPC_2021.R")
rm(list=ls()) # good practice in this instance
source("uf21/uf21_HPC_2021_main.R")
cluster_run(0.1, 100, 3, 1, 10, 200, "my_test_file_1.rda")
load("/Users/Uva/Documents/CMEECourseWork/HPC/code/my_test_file_1.rda")
load("/Users/Uva/Documents/CMEECourseWork/HPC/code/my_test_file_1.rda")
# Question 17
cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
starting_com <- init_community_min(size)
wall_time_sec = wall_time * 60
gen = 0
start_time <- proc.time()[["elapsed"]]
interval_spp_abun_oct <- c()
while ((proc.time()[["elapsed"]] - start_time) < wall_time_sec ){
starting_com <- neutral_generation_speciation(starting_com, speciation_rate)
gen <- gen +1
if (gen <= burn_in_generations){ # within burn-in period
if (gen %% interval_rich == 0){
interval_spp_richness <- species_richness(starting_com)
time_series_burnin <- neutral_time_series_speciation(starting_com, speciation_rate, burn_in_generations)
}
else{ # exceed burn-in period
break
}
}
if (gen %% interval_oct == 0){ # throughout the whole simulation
spp_abun <- species_abundance(starting_com)
interval_spp_abun_oct <- list(octaves(spp_abun))
}
else{
break
}
}
end_time <- proc.time()[["elapsed"]]
time_spent <- end_time - start_time
interval_spp_abun_oct <- interval_spp_abun_oct
save(time_series_burnin, interval_spp_richness, interval_spp_abun_oct, starting_com, time_spent,
speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations,
file = output_file_name)
}
rm(list=ls()) # good practice in this instance
source("uf21/uf21_HPC_2021_main.R")
cluster_run(0.1, 100, 3, 1, 10, 200, "my_test_file_1.rda")
load("/Users/Uva/Documents/CMEECourseWork/HPC/code/my_test_file_1.rda")
# Question 17
cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
starting_com <- init_community_min(size)
wall_time_sec = wall_time * 60
gen = 0
start_time <- proc.time()[["elapsed"]]
interval_spp_abun_oct <- c()
while ((proc.time()[["elapsed"]] - start_time) < wall_time_sec ){
starting_com <- neutral_generation_speciation(starting_com, speciation_rate)
gen <- gen +1
if (gen <= burn_in_generations){ # within burn-in period
if (gen %% interval_rich == 0){
interval_spp_richness <- c(species_richness(starting_com))
time_series_burnin <- neutral_time_series_speciation(starting_com, speciation_rate, burn_in_generations)
}
else{ # exceed burn-in period
break
}
}
if (gen %% interval_oct == 0){ # throughout the whole simulation
spp_abun <- species_abundance(starting_com)
interval_spp_abun_oct <- list(octaves(spp_abun))
}
else{
break
}
}
end_time <- proc.time()[["elapsed"]]
time_spent <- end_time - start_time
interval_spp_abun_oct <- interval_spp_abun_oct
save(time_series_burnin, interval_spp_richness, interval_spp_abun_oct, starting_com, time_spent,
speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations,
file = output_file_name)
}
rm(list=ls()) # good practice in this instance
source("uf21/uf21_HPC_2021_main.R")
cluster_run(0.1, 100, 3, 1, 1, 200, "my_test_file_1.rda")
load("/Users/Uva/Documents/CMEECourseWork/HPC/code/my_test_file_1.rda")
View(interval_spp_abun_oct)
View(interval_spp_abun_oct)
View(interval_spp_abun_oct)
source("~/Documents/CMEECourseWork/HPC/code/uf21/uf21_HPC_2021_main.R")
rm(list=ls()) # good practice in this instance
source("uf21/uf21_HPC_2021_main.R")
cluster_run(0.1, 100, 3, 1, 1, 200, "my_test_file_1.rda")
load("/Users/Uva/Documents/CMEECourseWork/HPC/code/my_test_file_1.rda")
View(interval_spp_abun_oct)
# Question 17
cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
starting_com <- init_community_min(size)
wall_time_sec = wall_time * 60
gen = 0
start_time <- proc.time()[["elapsed"]]
list_interval_spp_abun_oct <- c()
while ((proc.time()[["elapsed"]] - start_time) < wall_time_sec ){
starting_com <- neutral_generation_speciation(starting_com, speciation_rate)
gen <- gen +1
if (gen <= burn_in_generations){ # within burn-in period
if (gen %% interval_rich == 0){
interval_spp_richness <- c(species_richness(starting_com))
time_series_burnin <- neutral_time_series_speciation(starting_com, speciation_rate, burn_in_generations)
}
else{ # exceed burn-in period
break
}
}
if (gen %% interval_oct == 0){ # throughout the whole simulation
spp_abun <- species_abundance(starting_com)
interval_spp_abun_oct <- list(octaves(spp_abun))
list_interval_spp_abun_oct <- c(interval_spp_abun_oct, list_interval_spp_abun_oct)
}
else{
break
}
}
end_time <- proc.time()[["elapsed"]] # stop the timer and mark end time
time_spent <- (end_time - start_time)/60 # convert time spent from sec to min
interval_spp_abun_oct <- interval_spp_abun_oct
end_com <- starting_com # save the final community state with a new name
save(time_series_burnin, interval_spp_richness, interval_spp_abun_oct, end_com, time_spent,
speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations,
file = output_file_name)
}
rm(list=ls()) # good practice in this instance
source("uf21/uf21_HPC_2021_main.R")
cluster_run(0.1, 100, 3, 1, 1, 200, "my_test_file_1.rda")
load("/Users/Uva/Documents/CMEECourseWork/HPC/code/my_test_file_1.rda")
View(interval_spp_abun_oct)
# Question 17
cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
starting_com <- init_community_min(size)
wall_time_sec = wall_time * 60
gen = 0
start_time <- proc.time()[["elapsed"]]
list_interval_spp_abun_oct <- c()
while ((proc.time()[["elapsed"]] - start_time) < wall_time_sec ){
starting_com <- neutral_generation_speciation(starting_com, speciation_rate)
gen <- gen +1
if (gen <= burn_in_generations){ # within burn-in period
if (gen %% interval_rich == 0){
interval_spp_richness <- c(species_richness(starting_com))
time_series_burnin <- neutral_time_series_speciation(starting_com, speciation_rate, burn_in_generations)
}
else{ # exceed burn-in period
break
}
}
if (gen %% interval_oct == 0){ # throughout the whole simulation
spp_abun <- species_abundance(starting_com)
interval_spp_abun_oct <- list(octaves(spp_abun))
list_interval_spp_abun_oct <- c(interval_spp_abun_oct, list_interval_spp_abun_oct)
}
else{
break
}
}
end_time <- proc.time()[["elapsed"]] # stop the timer and mark end time
time_spent <- (end_time - start_time)/60 # convert time spent from sec to min
end_com <- starting_com # save the final community state with a new name
save(time_series_burnin, interval_spp_richness, list_interval_spp_abun_oct, end_com, time_spent,
speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations,
file = output_file_name)
}
source("~/Documents/CMEECourseWork/HPC/code/uf21_HPC_2021.R")
rm(list=ls()) # good practice in this instance
source("uf21/uf21_HPC_2021_main.R")
cluster_run(0.1, 100, 3, 1, 1, 200, "my_test_file_1.rda")
rm(list=ls()) # good practice in this instance
source("uf21/uf21_HPC_2021_main.R")
cluster_run(0.1, 100, 3, 1, 1, 200, "my_test_file_1.rda")
load("/Users/Uva/Documents/CMEECourseWork/HPC/code/my_test_file_1.rda")
View(list_interval_spp_abun_oct)
View(list_interval_spp_abun_oct)
haha <- species_abundance(end_com)
source("~/Documents/CMEECourseWork/HPC/code/uf21_HPC_2021.R")
View(list_interval_spp_abun_oct)
load("/Users/Uva/Documents/CMEECourseWork/HPC/code/my_test_file_1.rda")
haha <- species_abundance(end_com)
interval_spp_abun_oct <- list(octaves(haha))
View(interval_spp_abun_oct)
View(list_interval_spp_abun_oct)
View(list_interval_spp_abun_oct)
View(interval_spp_abun_oct)
View(list_interval_spp_abun_oct)
View(list_interval_spp_abun_oct)
View(interval_spp_abun_oct)
haha <- species_abundance(end_com)
yah <- list(octaves(haha))
View(yah)
View(list_interval_spp_abun_oct)
haha <- species_abundance(end_com)
View(yah)
View(list_interval_spp_abun_oct)
source("~/Documents/CMEECourseWork/HPC/code/uf21/uf21_HPC_2021_main.R")
rm(list=ls()) # good practice in this instance
source("uf21/uf21_HPC_2021_main.R")
cluster_run(0.1, 100, 3, 1, 10, 200, "my_test_file_1.rda")
cluster_run(0.1, 100, 3, 1, 10, 200, "my_test_file_1.rda")
# Question 17
cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
starting_com <- init_community_min(size)
wall_time_sec = wall_time * 60
gen = 0
start_time <- proc.time()[["elapsed"]]
list_interval_spp_abun_oct <- c()
while ((proc.time()[["elapsed"]] - start_time) < wall_time_sec ){
starting_com <- neutral_generation_speciation(starting_com, speciation_rate)
gen <- gen +1
if (gen <= burn_in_generations){ # within burn-in period
if (gen %% interval_rich == 0){
interval_spp_richness <- c(species_richness(starting_com))
time_series_burnin <- neutral_time_series_speciation(starting_com, speciation_rate, burn_in_generations)
}
else{ # exceed burn-in period
break
}
}
if (gen %% interval_oct == 0){ # throughout the whole simulation
spp_abun <- species_abundance(starting_com)
interval_spp_abun_oct <- list(octaves(spp_abun))
list_interval_spp_abun_oct <- c(interval_spp_abun_oct, list_interval_spp_abun_oct)
}
else{
break
}
}
end_time <- proc.time()[["elapsed"]] # stop the timer and mark end time
time_spent <- (end_time - start_time)/60 # convert time spent from sec to min
end_com <- starting_com # save the final community state with a new name
save(time_series_burnin, interval_spp_richness, list_interval_spp_abun_oct, end_com, time_spent,
speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations,
file = output_file_name)
}
source("~/Documents/CMEECourseWork/HPC/code/uf21/uf21_HPC_2021_main.R")
rm(list=ls()) # good practice in this instance
source("uf21/uf21_HPC_2021_main.R")
cluster_run(0.1, 100, 3, 1, 10, 200, "my_test_file_1.rda")
load("/Users/Uva/Documents/CMEECourseWork/HPC/code/my_test_file_1.rda")
source("~/Documents/CMEECourseWork/HPC/code/uf21/uf21_HPC_2021_main.R")
source("~/Documents/CMEECourseWork/HPC/code/uf21_HPC_2021.R")
rm(list=ls()) # good practice in this instance
source("uf21/uf21_HPC_2021_main.R")
cluster_run(0.1, 100, 3, 1, 10, 200, "my_test_file_1.rda")
load("/Users/Uva/Documents/CMEECourseWork/HPC/code/my_test_file_1.rda")
# Question 17
cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
starting_com <- init_community_min(size)
wall_time_sec = wall_time * 60
gen = 0
start_time <- proc.time()[["elapsed"]]
list_interval_spp_abun_oct <- c()
while ((proc.time()[["elapsed"]] - start_time) < wall_time_sec ){
starting_com <- neutral_generation_speciation(starting_com, speciation_rate)
gen <- gen +1
if (gen <= burn_in_generations){ # within burn-in period
if (gen %% interval_rich == 0){
interval_spp_richness <- c(species_richness(starting_com))
time_series_burnin <- neutral_time_series_speciation(starting_com, speciation_rate, burn_in_generations)
}
else{ # exceed burn-in period
break
}
}
if (gen %% interval_oct == 0){ # throughout the whole simulation
spp_abun <- species_abundance(starting_com)
interval_spp_abun_oct <- list(octaves(spp_abun))
list_interval_spp_abun_oct <- c(interval_spp_abun_oct, list_interval_spp_abun_oct)
}
else{
break
}
}
end_time <- proc.time()[["elapsed"]] # stop the timer and mark end time
time_spent <- (end_time - start_time)/60 # convert time spent from sec to min
end_com <- starting_com # save the final community state with a new name
list_interval_spp_abun_oct <- list_interval_spp_abun_oct
save(time_series_burnin, interval_spp_richness, list_interval_spp_abun_oct, end_com, time_spent,
speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations,
file = output_file_name)
}
rm(list=ls()) # good practice in this instance
source("uf21/uf21_HPC_2021_main.R")
cluster_run(0.1, 100, 3, 1, 10, 200, "my_test_file_1.rda")
# Question 17
cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
starting_com <- init_community_min(size)
wall_time_sec = wall_time * 60
gen = 0
start_time <- proc.time()[["elapsed"]]
list_interval_spp_abun_oct <- c()
while ((proc.time()[["elapsed"]] - start_time) < wall_time_sec ){
starting_com <- neutral_generation_speciation(starting_com, speciation_rate)
gen <- gen +1
if (gen <= burn_in_generations){ # within burn-in period
if (gen %% interval_rich == 0){
interval_spp_richness <- c(species_richness(starting_com))
time_series_burnin <- neutral_time_series_speciation(starting_com, speciation_rate, burn_in_generations)
}
else{ # exceed burn-in period
break
}
}
if (gen %% interval_oct == 0){ # throughout the whole simulation
spp_abun <- species_abundance(starting_com)
interval_spp_abun_oct <- list(octaves(spp_abun))
list_interval_spp_abun_oct <- c(interval_spp_abun_oct, list_interval_spp_abun_oct)
}
else{
break
}
}
end_time <- proc.time()[["elapsed"]] # stop the timer and mark end time
time_spent <- (end_time - start_time)/60 # convert time spent from sec to min
end_com <- starting_com # save the final community state with a new name
list_interval_spp_abun_oct <- list_interval_spp_abun_oct
save(time_series_burnin, interval_spp_richness, list_interval_spp_abun_oct, end_com, time_spent,
speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations,
file = output_file_name)
}
source("~/Documents/CMEECourseWork/HPC/code/uf21/uf21_HPC_2021_main.R")
source("~/Documents/CMEECourseWork/HPC/code/uf21_HPC_2021.R")
rm(list=ls()) # good practice in this instance
source("uf21/uf21_HPC_2021_main.R")
cluster_run(0.1, 100, 3, 1, 10, 200, "my_test_file_1.rda")
# Question 17
cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
starting_com <- init_community_min(size)
wall_time_sec = wall_time * 60
gen = 0
start_time <- proc.time()[["elapsed"]]
list_interval_spp_abun_oct <- c()
while ((proc.time()[["elapsed"]] - start_time) < wall_time_sec ){
starting_com <- neutral_generation_speciation(starting_com, speciation_rate)
gen <- gen +1
if (gen <= burn_in_generations){ # within burn-in period
if (gen %% interval_rich == 0){
interval_spp_richness <- c(species_richness(starting_com))
time_series_burnin <- neutral_time_series_speciation(starting_com, speciation_rate, burn_in_generations)
}
else{ # exceed burn-in period
break
}
}
if (gen %% interval_oct == 0){ # throughout the whole simulation
spp_abun <- species_abundance(starting_com)
interval_spp_abun_oct <- list(octaves(spp_abun))
list_interval_spp_abun_oct <- c(interval_spp_abun_oct, list_interval_spp_abun_oct)
}
else{
break
}
}
end_time <- proc.time()[["elapsed"]] # stop the timer and mark end time
time_spent <- (end_time - start_time)/60 # convert time spent from sec to min
end_com <- starting_com # save the final community state with a new name
list_interval_spp_abun_oct <- list_interval_spp_abun_oct
save(time_series_burnin, interval_spp_richness, list_interval_spp_abun_oct, end_com, time_spent,
speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations,
file = output_file_name)
}
source("~/Documents/CMEECourseWork/HPC/code/uf21/uf21_HPC_2021_main.R")
rm(list=ls()) # good practice in this instance
source("uf21/uf21_HPC_2021_main.R")
cluster_run(0.1, 100, 3, 1, 10, 200, "my_test_file_1.rda")
cluster_run(0.1, 100, 3, 1, 10, 200, "my_test_file_1.rda")
