Starting code feedback for Uva, Week2

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 4.50 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: .git, week3, week2, Feedback, week1

Found the following files in parent directory: README.md, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
*~ 
*.tmp

#Ignore files and directories
week1/code/*.tif
week1/sandbox/
week1/code/*.log
week1/code/.txt

#Keep gitkeep
!week1/results/.gitkeep
!week1/sandbox/.gitkeep


**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# My CMEE CourseWork Repository

This repository contains all coursework for the computing component of Computational Methods in Ecology and Evolution (CMEE) Master's Course .
Instructions to run the codes can be found [here](https://mhasoba.github.io/TheMulQuaBio/intro.html).
Data required to run the coding scripts can be downloaded from the following [repository](https://github.com/mhasoba/TheMulQuaBio).
******************
#### Languages:
bash version 3.2.57(1)

*****************
#### Dependencies:
A UNIX based Operating System is needed to run the projects. Linux and Mac OS are both possible options.
*****************
#### Installation:
Linux Ubuntu can be downloaded [here](https://ubuntu.com/)
*****************
#### Project structure and usage:
This project contains 10 folders, one for each week. Description and instructions can be found in each week's README.md file.

In each folder, there are four subfolders: code, data, results, sandbox. Code stores all the codes written for each week's practicals. Data stores all the data needed to run the scripts stored in code. Results store the output of coding scripts. Sandbox is used for experimental purposes and is left empty.

###### Coding scripts and data stored in the weekly folders:
Week 1: For week 1 practicals -- including UNIX, shell scripts, LaTeX

Week 2: For week 2 practicals -- Python I scripts

Week 3: For week 3 practicals -- R



************************************
#### Author name and contact:
Uva Fung uf21@imperial.ac.uk

**********************************************************************

======================================================================
Looking for the weekly directories...

Found 3 weekly directories: week1, week2, week3

The Week2 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK2...

Found the following directories: code, sandbox, results, data

Found the following files: READMEweek2.md

Checking for readme file in weekly directory...

Found README in parent directory, named: READMEweek2.md

Printing contents of READMEweek2.md:

**********************************************************************
# CMEE CourseWork Week 2

This repository contains codes and data for Computational Methods in Ecology and Evolution (CMEE) week 2 coursework.
Instructions to run the codes can be found [here](https://mhasoba.github.io/TheMulQuaBio/intro.html).

Data required to run the coding scripts can be downloaded from the following [repository](https://github.com/mhasoba/TheMulQuaBio).

***

#### Languages:
Python 3.9.7

***********
#### Dependencies:
A UNIX based Operating System is needed to run the projects. Linux and Mac OS are both possible options. Linux Ubuntu can be downloaded [here](https://ubuntu.com/)


******************
#### Installation:

###### Install Python 3.9.7 can be installed [here](https://www.python.org/downloads/release/python-397/)


***********

#### Project structure and usage:
This project contains four folder: code, data, results, sandbox; and a README file.

Code stores all the codes written for week 2 practicals. Data stores all the data needed to run the scripts stored in code. Results store the output of coding scripts. Sandbox is used for experimental purposes and is left empty.

###### Files in code:

    Code scripts --
        align_seqs.py: aligns two DNA sequences
        basic_csv.py: read csv file and write output containing only species name and body mass
        basic_io1.py: file input
        basic_io2.py: file output
        basic_io3.py: save string objects with pickle
        boilerplate.py: Python boilerplate
        cfexercise1.py: functions foo_1() to foo_6()
        cfexercise2.py: functions hello_1() to hello_6()
        control_flow.py: control flow script
        debugme.py: debug testing
        dictionary.py: populate a dictionary that maps order names to sets of taxa
        lc1.py: create lists of bird latin names, common names and mean body mass
        lc2.py: create lists of rainfall in different months
        loops.py: loops example
        oaks.py: finds just those taxa that are oak trees from a list of species
        scope.py: tesing global and local variables
        sysargv.py: system argument testing
        test_control_flow.py: control_flow.py with doctest
        tuple.py: create tuples of bird latin names, common names and mean body mass
        using_name.py: testing __name__ == "__main__"


###### Files in data:
    bodymass.csv
    JustOaksData.csv
    testcsv.csv
    TestOaksData.csv
    seq.txt

*****************
#### Author name and contact:
Uva Fung uf21@imperial.ac.uk

**********************************************************************

Found following files in results directory: output.txt...

Ideally, Results directory should be empty other than, perhaps a .gitkeep. 

 0.5 pts deducted per results file 

Current Points = 99.5

Found 21 code files: scope.py, debugme.py, lc2.py, control_flow.py, loops.py, basic_io3.py, cfexercises1.py, oaks.py, align_seqs.py, using_name.py, dictionary.py, test_control_flow.py, sysargv.py, tuple.py, cfexercises2.py, basic_io1.py, basic_io2.py, boilerplate.py, lc1.py, basic_csv.py, output.txt

======================================================================
Testing script/code files...

======================================================================
Inspecting script file scope.py...

File contents are:

**********************************************************************
"""Experimenting with variable scopes"""

# 1
_a_global = 10 # a global variable
if _a_global >= 5:
    _b_global = _a_global + 5 # also a global variable

print("Before calling a_function, outside the function, the value of _a_global is", _a_global)
print("Before calling a_function, outside the function, the value of _b_global is", _b_global)

def a_function():
    """tesing global and local variables"""
    _a_global = 4 # a local variable

    if _a_global >= 4:
        _b_global = _a_global + 5 # also a local variable

    _a_local = 3

    print("Inside the function, the value of _a_global is ", _a_global)
    print("Inside the function, the value of _b_global is ", _b_global)
    print("Inside the function, the value of _a_local is ", _a_local)

    return None

a_function()


print("Outside the function, the value of _a_global is ", _a_global)
print("Outside the function, the value of _b_global is ", _b_global)
###############################

# 2
_a_global = 10

def a_function():
    """tesing global and local variables"""
    _a_local = 4

    print("Inside the function, the value _a_local is ", _a_local)
    print("Inside the function, the value _a_local is ", _a_global)

    return None

a_function()

print("Outside the function, the value of _a_global is", _a_global)
##############################


# 3
_a_global = 10

print("Before calling a_function, the value of _a_global is", _a_global)


def a_function():
    """tesing global and local variables"""
    global _a_global
    _a_global = 5
    _a_local = 4

    print("Inside the function, the value _a_global is ", _a_global)
    print("Inside the function, the value of _a_local is ", _a_local)

    return None

a_function()


print("After calling a_function, the value of _a_global now is", _a_global)
########################


# 4
def a_function():
    """tesing global and local variables"""
    _a_global = 10

    def _a_function2():
        global _a_global
        _a_global = 20
    
    print("Before calling a_function, value of _a_global is ", _a_global)

    _a_function2()
    
    print("After calling _a_function2, value of _a_global is ", _a_global)
    
    return None

a_function()

print("The value of a_global in main workspace / namespace is ", _a_global)
#####################

# 5
_a_global = 10

def a_function():

    def a_function2():
        """tesing global and local variables"""
        global _a_global
        _a_global = 20

    print("Before calling a_function, value of _a_global is ", _a_global)

    a_function2()

    print("After calling _a_function2, value of _a_global is ", _a_global)

a_function()

print("The value of a_global in main workspace / namespace is ", _a_global)
#######################




**********************************************************************

Testing scope.py...

scope.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 98.5

Output (only first 500 characters): 


**********************************************************************
Before calling a_function, outside the function, the value of _a_global is 10
Before calling a_function, outside the function, the value of _b_global is 15
Inside the function, the value of _a_global is  4
Inside the function, the value of _b_global is  9
Inside the function, the value of _a_local is  3
Outside the function, the value of _a_global is  10
Outside the function, the value of _b_global is  15
Inside the function, the value _a_local is  4
Inside the function, the value _a_local is  10
**********************************************************************

Code ran without errors

Time consumed = 0.07926s

======================================================================
Inspecting script file debugme.py...

File contents are:

**********************************************************************
#!/user/bin/env python3
# Author: Uva Fung uf21@imperial.ac.uk
# Script: debugme.py
# Desc: debugging
# Date: Oct 15 2021

"""testing debugging in python"""

def buggyfunc(x):
    """testing debugging via mathematical calculations"""
    y = x
    for i in range(x):
        try:
            y = y-1
            z = x/y
        except ZeroDivisionError:
            print(f"The result of fividing a number by zero is undefined")
        except:
            print(f"This didn't work; x = {x}; y = {y}")
        else:
            print(f"OK; x = {x}; y = {y}, z = {z};")
    return z

buggyfunc(20)


**********************************************************************

Testing debugme.py...

debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 98.5

Output (only first 500 characters): 


**********************************************************************
OK; x = 20; y = 19, z = 1.0526315789473684;
OK; x = 20; y = 18, z = 1.1111111111111112;
OK; x = 20; y = 17, z = 1.1764705882352942;
OK; x = 20; y = 16, z = 1.25;
OK; x = 20; y = 15, z = 1.3333333333333333;
OK; x = 20; y = 14, z = 1.4285714285714286;
OK; x = 20; y = 13, z = 1.5384615384615385;
OK; x = 20; y = 12, z = 1.6666666666666667;
OK; x = 20; y = 11, z = 1.8181818181818181;
OK; x = 20; y = 10, z = 2.0;
OK; x = 20; y = 9, z = 2.2222222222222223;
OK; x = 20; y = 8, z = 2.5;
OK; x = 20; y = 7, 
**********************************************************************

Code ran without errors

Time consumed = 0.07845s

======================================================================
Inspecting script file lc2.py...

File contents are:

**********************************************************************
# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

"""create list of months with different rainfall using loops and comprehensions"""

# create a list of months with rain <100 with conventional loops

# (1) Use a list comprehension to create a list of month,rainfall tuples where
# the amount of rain was greater than 100 mm.

# create a list of rainfall >100 with comprehension
heavy_rain = [r for r in rainfall if r[1] > 100]
print(heavy_rain)


# (2) Use a list comprehension to create a list of just month names where the
# amount of rain was less than 50 mm. 

# create a list of months with rain <50 with comprehension
little_rain = [(r[0]) for r in rainfall if r[1] < 50]
print(little_rain)


# (3) Now do (1) and (2) using conventional loops (you can choose to do 
# this before 1 and 2 !). 

# create a list of rainfall >100 with conventional loops
heavy_rain = []
for r in rainfall:
    if r[1] > 100:
        heavy_rain.append(r)
print(heavy_rain)

# create a list of months with rain <50 with conventional loops
little_rain = []

for r in rainfall:
    if r[1] < 50:
        little_rain.append((r[0]))
print(little_rain)


# A good example output is:
#
# Step #1:
# Months and rainfall values when the amount of rain was greater than 100mm:
# [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
# ... etc.


**********************************************************************

Testing lc2.py...

lc2.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98.5

Output (only first 500 characters): 


**********************************************************************
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
['MAR', 'SEP']
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
['MAR', 'SEP']

**********************************************************************

Code ran without errors

Time consumed = 0.08429s

======================================================================
Inspecting script file control_flow.py...

File contents are:

**********************************************************************
#!/user/bin/env python3
# Author: Uva Fung uf21@imperial.ac.uk
# Script: control_flow.py
# Desc: control flow for python programs
# Date: Oct 24 2021

"""control flow for python"""

__author__ = 'Uva Fung (u.fung21@imperial.ac.uk)'
__version__ = '0.0.1'


## imports ##
import sys #module to interface our program with the operating system

def even_or_odd(x=0): #if not specified, x should take value 0.

    """Find whether a number x is even or odd"""
    if x % 2 == 0:
        return "%d is Even!" % x
    return "%d is Odd!" % x


def largest_divisor_five(x=120):
    """Find which is the largest divisor of x among 2,3,4,5."""
    largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0:
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2
    else: # when a;; other (if, elif) conditions are not met
        return "No divisor found for %d!" % x       # %d act as a place holder for a number
    return "The largest divisor of %d is %d" % (x, largest)     # %d act as a place holder for a number, 'largest' variable also stands for a value here

def is_prime(x=70):
    """Find whether an integer is prime."""
    for i in range(2, x):
        if x % i == 0:
            print("%d is not a prime: %d is a divisor" % (x, i))
            return False
    print("%d is a prime!" % x)
    return True

def find_all_primes(x=22):
    """Find all the primes up to x"""
    allprimes = []
    for i in range(2, x + 1):
      if is_prime(i):
        allprimes.append(i)
    print("There are %d primes between 2 and %d" % (len(allprimes), x))
    return allprimes        # remember to use return to print out all lines!

def main(argv):
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return(0)

if(__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)





**********************************************************************

Testing control_flow.py...

control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 98.0

Output (only first 500 characters): 


**********************************************************************
22 is Even!
33 is Odd!
The largest divisor of 120 is 5
No divisor found for 121!
60 is not a prime: 2 is a divisor
False
59 is a prime!
True
2 is a prime!
3 is a prime!
4 is not a prime: 2 is a divisor
5 is a prime!
6 is not a prime: 2 is a divisor
7 is a prime!
8 is not a prime: 2 is a divisor
9 is not a prime: 3 is a divisor
10 is not a prime: 2 is a divisor
11 is a prime!
12 is not a prime: 2 is a divisor
13 is a prime!
14 is not a prime: 2 is a divisor
15 is not a prime: 3 is a divisor
16 is 
**********************************************************************

Code ran without errors

Time consumed = 0.07934s

======================================================================
Inspecting script file loops.py...

File contents are:

**********************************************************************
# FOR loops in Python

"""testing for loops in python"""

for i in range(5):
    print(i)

my_list = [0, 2, "geronimo!", 3.0, True, False]
for k in my_list:
    print(k)

# print each value by summing up the one before it [0, 0+1, 0+1+11, 0+1+11+111, 0+1+11+111+1111]
total = 0
summands = [0, 1, 11, 111, 1111]
for s in summands:
    total = total + s
    print(total)

# WHILE loops in Python, print out all the possible values (bc it's a loop)
z = 0
while z < 100:
    z = z + 1
    print(z)

# non-stop printing until it stops
b = True
while b:
    print("GERONIMO! infinite loop! ctrl+c to stop!")
    


**********************************************************************

Testing loops.py...

loops.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98.0

Output (only first 500 characters): 


**********************************************************************
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c
**********************************************************************

Code ran without errors

Time consumed = 11.64210s

======================================================================
Inspecting script file basic_io3.py...

File contents are:

**********************************************************************
#####################
# STORING OBJECTS
####################

"""Save an object using pickle (machine-readable format)"""

# To save an object (even complex) for later use
my_dictionary = {"a key": 10, "another key": 11}

import pickle
 
f = open('../sandbox/testp.p', 'wb')
pickle.dump(my_dictionary, f)
f.close()

## Load the data again
f = open('../sandbox/testp.p', 'rb')
another_dictionary = pickle.load(f)
f.close()

print(another_dictionary)


**********************************************************************

Testing basic_io3.py...

basic_io3.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98.0

Output (only first 500 characters): 


**********************************************************************
{'a key': 10, 'another key': 11}

**********************************************************************

Code ran without errors

Time consumed = 0.15757s

======================================================================
Inspecting script file cfexercises1.py...

File contents are:

**********************************************************************
#!/user/bin/env python3
# Author: Uva Fung uf21@imperial.ac.uk
# Script: cfexercise1.py
# Desc: conditional modules for python
# Date: Oct 13 2021

"""conditonal modules for python"""

__author__ = 'Uva Fung (@imperial.ac.uk)'
__version__ = '0.0.1'

## imports ##
import sys #module to interface our program with the operating system


def foo_1(x=0):         # calculate the square root of x 

    """Calculate the squre root of x"""
    return "The square root of %d is %d" % (x, (x ** 0.5))


def foo_2(x, y):        # compare if x is greater than y

    """Compare if the value of x is greater than y"""
    if x > y:
        return "The value of %d is greater than %d" % (x, y)
    return "The value of %d is greater than %d" % (y, x)


def foo_3(x, y, z):     # tmp refers a temporary variable, swap order of x y and order of y z
    
    """If x is greater than y, swap their order; if y is greater than z, swap their order"""
    
    if x > y:
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    return "The new order is [%d, %d, %d]" % (x, y, z)


def foo_4(x):         # print + update results in a loop (range 1, x+1)
    
    """Calculate the factorial of x"""
    result = 1
    for i in range(1, x+1):
        result = result * i
    return "The factorial of %d is %d" % (x, result)


def foo_5(x):         # recursive function that calculates the factorial of x
    """Calculate the factorial of x. The factorial of x is ..."""
    if x == 1:
        return 1
    return x * foo_5(x-1)


        

def foo_6(x):         # calculate factorial of x in a different way
    """Calculate the factorial of x"""
    initial_x = x   # save the original value of x as a temporary variable
    facto = 1
    if x == 1:
        return "The factorial of 1 is 1"
    while x >= 1:
        facto = facto * x
        x = x - 1
    return "The factorial of %d is %d" % (initial_x, facto)


def main(argv):
    """test agurments"""
    #x=argv[1]
    #print(foo_5(x))
    print(foo_1(16))
    print(foo_2(1, 2))
    print(foo_2(3, 2))
    print(foo_3(3, 2, 1))
    print(foo_3(3, 1, 2))
    print(foo_4(3))
    print(foo_5(3))
    print(foo_6(3))
    return(0)

if(__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing cfexercises1.py...

cfexercises1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 98.0

Output (only first 500 characters): 


**********************************************************************
The square root of 16 is 4
The value of 2 is greater than 1
The value of 3 is greater than 2
The new order is [2, 1, 3]
The new order is [1, 2, 3]
The factorial of 3 is 6
6
The factorial of 3 is 6

**********************************************************************

Code ran without errors

Time consumed = 0.08007s

======================================================================
Inspecting script file oaks.py...

File contents are:

**********************************************************************
taxa = [ 'Quercus robur',
         'Fraxinus excelsior',
         'Pinus sylvestris',
         'Quercus cerris',
         'Quercus petraea'
        ]

"""Finds just those taxa that are oak trees from a list of species"""


def is_an_oak(name):
    """return oak species (starting with quercus)"""
    return name.lower().startswith('quercus ')

## Using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species)
print(oaks_loops)

## Using list comprehensions
oaks_lc = set([species for species in taxa if is_an_oak(species) ])
print(oaks_lc)

## Get names in UPPER CASE using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

## Get names in UPPER CASE using list comprehensions
oaks_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)


**********************************************************************

Testing oaks.py...

oaks.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 98.0

Output (only first 500 characters): 


**********************************************************************
{'Quercus cerris', 'Quercus robur', 'Quercus petraea'}
{'Quercus cerris', 'Quercus robur', 'Quercus petraea'}
{'QUERCUS ROBUR', 'QUERCUS PETRAEA', 'QUERCUS CERRIS'}
{'QUERCUS ROBUR', 'QUERCUS PETRAEA', 'QUERCUS CERRIS'}

**********************************************************************

Code ran without errors

Time consumed = 0.08194s

======================================================================
Inspecting script file align_seqs.py...

File contents are:

**********************************************************************
#!/user/bin/env python3
# Author: Uva Fung uf21@imperial.ac.uk
# Script: align_seqs.py
# Desc: align seqeunces
# Date: Oct 18 2021

"""Align two seqeunces and gives the best alignment as output"""

__appname__ = 'AlignSequence'
__author__ = 'Uva Fung uf21@imperial.ac.uk'
__version__ = '0.0.1'
__license__ = "License for this code/program"

## imports ##
import sys #module to interface our program with the operating system

def main(argv):
    """ Main entry point of the program """
    print('This program aligns seqeunces') # NOTE: indented using two tabs or 4 spaces
    return 0

# import seqeunces from seq.txt
with open('../data/seq.txt','r') as f:   # open seq.txt which stores the two sequences
    line = f.readlines()         
    seq_line = []     #create a new list for storing the seqeunces
    
    for l in line:
        seq_line.append(l.strip())

seq1 = line[1] # save line 1 as seq1
seq2 = line[0] # save line 0 as seq2


# Assign the longer sequence s1, and the shorter to s2
# l1 is length of the longest, l2 that of the shortest

l1 = len(seq1) # find length of seq1 and save it as l1
l2 = len(seq2) # find length of seq2 and save it as l2
if l1 >= l2:   # if seq1 is longer than seq2
    s1 = seq1  
    s2 = seq2
else:
    s1 = seq2
    s2 = seq1
    l1, l2 = l2, l1 # swap the two lengths so that s1 is always longer than s2

# A function that computes a score by returning the number of matches starting
# from arbitrary startpoint (chosen by user)
def calculate_score(s1, s2, l1, l2, startpoint):
    """Calculate the matching score for seqeunces 1 and 2"""
    matched = "" # to hold string displaying alignements
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1: # this means that some bases still needs to be compared
            if s1[i + startpoint] == s2[i]: # if the bases match. i + startpoint because python index starts from 0
                matched = matched + "*" 
                score = score + 1
            else:
                matched = matched + "-"

    # some formatted output
    print("." * startpoint + matched) # "." * startpoint = the number of . to be printed           
    print("." * startpoint + s2) # print . plus the shorter seqeuence
    print(s1)
    print(score) 
    print(" ")

    return score

# Test the function with some example starting points:
# calculate_score(s1, s2, l1, l2, 0)
# calculate_score(s1, s2, l1, l2, 1)
# calculate_score(s1, s2, l1, l2, 5)


# now try to find the best match (highest score) for the two sequences
my_best_align = None
my_best_score = -1 # use -1 because the best alignment could be 0 (no match). If we put 0 here this could cause confusion.

for i in range(l1): # Note that you just take the last alignment with the highest score
    z = calculate_score(s1, s2, l1, l2, i)
    if z > my_best_score:
        my_best_align = "." * i + s2 # this will align s2 with the longer s1 seqeunce
        my_best_score = z  #loop until there is a score greater than all of the other scores (top score found)

# Below shows the best alignment between the two seqeunces:
print(my_best_align) #print best alignment
print(s1) #print s1 such that it aligns best with s2
print("The best score is %d" % my_best_score)


print("%s" % my_best_align, file=open("output.txt", "a"))
print("%s" % s1, file=open("output.txt", "a"))
print("The best score is %d" % my_best_score, file=open("output.txt", "a"))

import shutil

shutil.move('output.txt', '../results/')

"""output.txt is stored in results folder"""




if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing align_seqs.py...

align_seqs.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 98.0

Output (only first 500 characters): 


**********************************************************************
-----*****
CAATTCGGAT
ATCGCCGGATTACGGG

5
 
.------*--*
.CAATTCGGAT
ATCGCCGGATTACGGG

2
 
..*---------
..CAATTCGGAT
ATCGCCGGATTACGGG

1
 
...--------*-
...CAATTCGGAT
ATCGCCGGATTACGGG

1
 
....*---------
....CAATTCGGAT
ATCGCCGGATTACGGG

1
 
.....*---*-----
.....CAATTCGGAT
ATCGCCGGATTACGGG

2
 
......--***--*--
......CAATTCGGAT
ATCGCCGGATTACGGG

4
 
.......-*-*-***--
.......CAATTCGGAT
ATCGCCGGATTACGGG

5
 
........------**-
........CAATTCGGAT
ATCGCCGGATTACGGG

2
 
.........--*---*-
.........CAATTCG
**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "align_seqs.py", line 98, in <module>
    shutil.move('output.txt', '../results/')
  File "/usr/lib/python3.8/shutil.py", line 789, in move
    raise Error("Destination path '%s' already exists" % real_dst)
shutil.Error: Destination path '../results/output.txt' already exists

======================================================================
Inspecting script file using_name.py...

File contents are:

**********************************************************************
#!/user/bin/env python3
# Author: Uva Fung uf21@imperial.ac.uk
# Script: using_name.py
# Desc: using name for python programs
# Date: Oct 13 2021
# Filename: using_name.py

"""using __names__ for python programs"""

if __name__ == '__main__':
    print('This program is being run by itself')
else:
    print('I am being imported from another module')

print("This module's name is : " + __name__)



**********************************************************************

Testing using_name.py...

using_name.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98.0

Output (only first 500 characters): 


**********************************************************************
This program is being run by itself
This module's name is : __main__

**********************************************************************

Code ran without errors

Time consumed = 0.07711s

======================================================================
Inspecting script file dictionary.py...

File contents are:

**********************************************************************
taxa = [ ('Myotis lucifugus','Chiroptera'),
         ('Gerbillus henleyi','Rodentia',),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
        ]

# Write a short python script to populate a dictionary called taxa_dic 
# derived from taxa so that it maps order names to sets of taxa.
# 
# An example output is:
#  
# 'Chiroptera' : set(['Myotis lucifugus']) ... etc.
#  OR,
# 'Chiroptera': {'Myotis lucifugus'} ... etc

"""map order names to sets of taxa in dictionary"""

reorder_taxa = [(item[1], item[0]) for item in taxa]    #swap the order of order and species name


taxa_dic = {}

for order, species in reorder_taxa:
        taxa_dic.setdefault(order, []).append(species)  # set order as the key, then return the value of key (in this case species) using append

print(taxa_dic)

**********************************************************************

Testing dictionary.py...

dictionary.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98.0

Output (only first 500 characters): 


**********************************************************************
{'Chiroptera': ['Myotis lucifugus'], 'Rodentia': ['Gerbillus henleyi', 'Peromyscus crinitus', 'Mus domesticus', 'Cleithrionomys rutilus'], 'Afrosoricida': ['Microgale dobsoni', 'Microgale talazaci'], 'Carnivora': ['Lyacon pictus', 'Arctocephalus gazella', 'Canis lupus']}

**********************************************************************

Code ran without errors

Time consumed = 0.07848s

======================================================================
Inspecting script file test_control_flow.py...

File contents are:

**********************************************************************
#!/user/bin/env python3
# Author: Uva Fung uf21@imperial.ac.uk
# Script: test_control_flow.py
# Desc: unit testing with control flow
# Date: Oct 14 2021

"""unit testing with flow control"""


__author__ = 'Uva Fung (uf21@imperial.ac.uk)'
__version__ = '0.0.1'


## imports ##
import sys #module to interface our program with the operating system
import doctest #import the doctest module

def even_or_odd(x=0): #if not specified, x should take value 0

    """Find whether a number x is even or odd.
    
    >>> even_or_odd(10)
    '10 is Even!'

    >>> even_or_odd(5)
    '5 is Odd!'

    whenever a float is provided, then the closest integer is used:
    >>> even_or_odd(3.2)
    '3 is Odd!'

    in case of negative numbers, the positive is taken:
    >>> even_or_odd(-2)
    '-2 is Even!'

    """

    #Define function to be tested
    if x % 2 == 0:
        return "%d is Even!" % x
    return "%d is Odd!" % x


## functions ##
def main(argv):     
    """test argument"""     
    print(even_or_odd(22))
    print(even_or_odd(33))
    return 0

if __name__ == "__main__":
    status = main(sys.argv)

doctest.testmod() # to run with embedded tests




**********************************************************************

Testing test_control_flow.py...

test_control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 98.0

Output (only first 500 characters): 


**********************************************************************
22 is Even!
33 is Odd!

**********************************************************************

Code ran without errors

Time consumed = 0.12358s

======================================================================
Inspecting script file sysargv.py...

File contents are:

**********************************************************************
#!/user/bin/env python3
# Author: Uva Fung uf21@imperial.ac.uk
# Script: sysargv.py
# Desc: using name for python programs
# Date: Oct 13 2021
# Filename: sysargv.py

"""testing system argument"""


import sys
print("This is the name of the script: ", sys.argv[0])
print("Number of arguments: ", len(sys.argv))
print("The arguments are: " , str(sys.argv))


**********************************************************************

Testing sysargv.py...

sysargv.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98.0

Output (only first 500 characters): 


**********************************************************************
This is the name of the script:  sysargv.py
Number of arguments:  1
The arguments are:  ['sysargv.py']

**********************************************************************

Code ran without errors

Time consumed = 0.07780s

======================================================================
Inspecting script file tuple.py...

File contents are:

**********************************************************************
birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

"""print ouput of bird latin names, common names and body mass"""

# Birds is a tuple of tuples of length three: latin name, common name, mass.
# write a (short) script to print these on a separate line or output block by species 
# 
# A nice example output is:
# 
# Latin name: Passerculus sandwichensis
# Common name: Savannah sparrow
# Mass: 18.7
# ... etc.

# Hints: use the "print" command! You can use list comprehensions!

for b in birds:
    if b[0]: 
        print("Latin name: %s" % b[0])
    if b[1]:
        print("Common name: %s" % b[1])
    if b[2]:
        print("Mass: %s" % b[2])

    


**********************************************************************

Testing tuple.py...

tuple.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98.0

Output (only first 500 characters): 


**********************************************************************
Latin name: Passerculus sandwichensis
Common name: Savannah sparrow
Mass: 18.7
Latin name: Delichon urbica
Common name: House martin
Mass: 19
Latin name: Junco phaeonotus
Common name: Yellow-eyed junco
Mass: 19.5
Latin name: Junco hyemalis
Common name: Dark-eyed junco
Mass: 19.6
Latin name: Tachycineata bicolor
Common name: Tree swallow
Mass: 20.2

**********************************************************************

Code ran without errors

Time consumed = 0.07864s

======================================================================
Inspecting script file cfexercises2.py...

File contents are:

**********************************************************************
# Loops and conditionals combined

"""testing for and while loop in python"""

# for j = 0-11, if j is completely divided by 3, print hello (repeat until j = 11)
for j in range(12):
    if j % 3 == 0:
        print(j)    # 0 divided by 3 is also 0!!!
        print('hello')


for j in range(15):
    if j % 5 == 3:
        print('hello')
    elif j % 4 == 3:
        print('hello')

# if z is not equal to 15, print hello until z equal to 15 (via loop)
z = 0
while z != 15:
    print('hello')
    z = z + 3

# while loop repeats itself until z < 100
z = 12
while z < 100:
    if z == 31:
        for k in range(7):
            print('hello')
    elif z == 18:
        print('hello')
    z = z + 1         # repeat this loop up until z < 100


**********************************************************************

Testing cfexercises2.py...

cfexercises2.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98.0

Output (only first 500 characters): 


**********************************************************************
0
hello
3
hello
6
hello
9
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello

**********************************************************************

Code ran without errors

Time consumed = 0.08223s

======================================================================
Inspecting script file basic_io1.py...

File contents are:

**********************************************************************
###################
# FILE INPUT
###################

"""Codes that can be used to import into python"""

# Open a file for reading
with open('../sandbox/test.txt', 'r') as f:
# use "implicit" for loop:
# if the object is a file, python will cycle over lines
    for line in f:
        print(line)


# Same example, skip blank lines
with open('../sandbox/test.txt', 'r') as f:
    for line in f:
        if len(line.strip()) > 0:
            print(line)


**********************************************************************

Testing basic_io1.py...

basic_io1.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98.0

Output (only first 500 characters): 


**********************************************************************
First Line 

Second Line 



Third Line 



Fourth Line 
First Line 

Second Line 

Third Line 

Fourth Line 

**********************************************************************

Code ran without errors

Time consumed = 0.08052s

======================================================================
Inspecting script file basic_io2.py...

File contents are:

**********************************************************************
###################
# FILE OUTPUT
###################

"""Save the elements of a list to a file"""

list_to_save = range(100)

f = open('../sandbox/testout.txt', 'w') #open a file with write permission
for i in list_to_save:
    f.write(str(i) + '\n')  ## Add a new line at the end

f.close()


**********************************************************************

Testing basic_io2.py...

basic_io2.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.08385s

======================================================================
Inspecting script file boilerplate.py...

File contents are:

**********************************************************************
#!/user/bin/env python3
# Author: Uva Fung uf21@imperial.ac.uk
# Script: boilerplate.py
# Desc: simple boilerplate for python programs
# Date: Oct 13 2021

"""boilerplate for python"""

__appname__ = '[application name here]'
__author__ = 'Your Name (your email address)'
__version__ = '0.0.1'
__license__ = "License for this code/program"

## imports ##
import sys #module to interface our program with the operating system

## constants ##

## functions ##
def main(argv):          
    """ Main entry point of the program """
    print('This is a boilerplate') # Note: indented using two tabs / four spaces
    return 0
    
if __name__ == "__main__":
    """Make sure the "main" function is called from command line"""
    status = main(sys.argv)
    sys.exit(status)


**********************************************************************

Testing boilerplate.py...

boilerplate.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 98.0

Output (only first 500 characters): 


**********************************************************************
This is a boilerplate

**********************************************************************

Code ran without errors

Time consumed = 0.08043s

======================================================================
Inspecting script file lc1.py...

File contents are:

**********************************************************************
birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

"""list comprehensions and loops to create list of bird names and masses"""
#(1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively. 

# create a list of scientific names with comprehension
sci_list = [item[0] for item in birds]
print(sci_list)

# create a list of common names with comprehension
common_list = [item[1] for item in birds]
print(common_list)

# create a list of body masses with comprehension
mass_list = [item[2] for item in birds]
print(mass_list)



# (2) Now do the same using conventional loops (you can choose to do this 
# before 1 !). 

# A nice example out out is:
# Step #1:
# Latin names:
# ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
# ... etc.
 
 # create a list of scientific names with conventional loops
sci_list = []
for item in birds:
    sci_list.append(item[0]) #split using a comma
print(sci_list)

# create a list of common names with conventional loops
common_list = []
for item in birds:
    common_list.append(item[1]) #split using a comma
print(common_list)

# create a list of body masses with conventional loops
mass_list = []
for item in birds:
    mass_list.append(item[2]) #split using a comma
print(mass_list)
**********************************************************************

Testing lc1.py...

lc1.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98.0

Output (only first 500 characters): 


**********************************************************************
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]

**********************************************************************

Code ran without errors

Time consumed = 0.08921s

======================================================================
Inspecting script file basic_csv.py...

File contents are:

**********************************************************************
import csv

"""Write a file containing: 'Species' and 'Body mass male (Kg)' """

# read a file containing all info of species
with open('../data/testcsv.csv', 'r') as f:

    csvread = csv.reader(f)
    temp = []
    for row in csvread:
        temp.append(tuple(row))
        print(row)
        print("The species is", row[0])

# write a file containing only species name and Body mass
with open('../data/testcsv.csv', 'r') as f:
    with open('../data/bodymass.csv', 'w') as g:

        csvread = csv.reader(f)
        csvwrite = csv.writer(g)
        for row in csvread:
            print(row)
            csvwrite.writerow([row[0], row[4]])
            
**********************************************************************

Testing basic_csv.py...

basic_csv.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98.0

Output (only first 500 characters): 


**********************************************************************
['Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)']
The species is Species
['Daubentonia_madagascariensis', 'Chiromyiformes ', 'Daubentoniidae', 'Madagascar', '2.7']
The species is Daubentonia_madagascariensis
['Allocebus_trichotis', 'Lemuriformes', 'Cheirogaleidae', 'Madagascar', '0.1']
The species is Allocebus_trichotis
['Avahi_laniger', 'Lemuriformes', 'Indridae', 'America', '1.03']
The species is Avahi_laniger
['Avahi_occidentalis', 'Lemuriformes', 'Indridae', 'Madagasc
**********************************************************************

Code ran without errors

Time consumed = 0.08727s

======================================================================
Inspecting script file output.txt...

File contents are:

**********************************************************************
CAATTCGGAT
ATCGCCGGATTACGGG

The best score is 5
CAATTCGGAT
ATCGCCGGATTACGGG

The best score is 5

**********************************************************************

Testing output.txt...

======================================================================
======================================================================
Finished running scripts

Ran into 1 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 98.0

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!