Starting code feedback for Uva, Week7

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 7.68 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: week1, week2, week7, .git, MiniProject, week3, Feedback

Found the following files in parent directory: .gitignore, README.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
*~ 
*.tmp

#Ignore files and directories
week1/code/*.tif
week1/sandbox/
week1/code/*.log
week1/code/.txt
week3/sandbox/
week7/sandbox/
MiniProject/sandbox/

#Keep gitkeep
!week1/results/.gitkeep
!week1/sandbox/.gitkeep
!week2/results/.gitkeep
!week2/sandbox/.gitkeep
!week3/results/.gitkeep
!week3/sandbox/.gitkeep
!week7/sandbox/.gitkeep
!week7/results/.gitkeep
!MiniProject/sandbox/.gitkeep
!MiniProject/results/.gitkeep





**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# My CMEE CourseWork Repository

This repository contains all coursework for the computing component of Computational Methods in Ecology and Evolution (CMEE) Master's Course .
Instructions to run the codes can be found [here](https://mhasoba.github.io/TheMulQuaBio/intro.html).
Data required to run the coding scripts can be downloaded from the following [repository](https://github.com/mhasoba/TheMulQuaBio).
******************
#### Languages:
bash version 3.2.57(1)

Please also refer to the README.md in each week's folder for specific languages applicable for that week

*****************
#### Dependencies:
A UNIX based Operating System is needed to run the projects. Linux and Mac OS are both possible options.
*****************
#### Installation:
Linux Ubuntu can be downloaded [here](https://ubuntu.com/)
*****************
#### Project structure and usage:
This project contains 5 folders, one for each week's submission. Description and instructions can be found in each week's README.md file.

In each folder, there are four subfolders: code, data, results, sandbox. Code stores all the codes written for each week's practicals. Data stores all the data needed to run the scripts stored in code. Results store the output of coding scripts. Sandbox is used for experimental purposes and is left empty.

###### Coding scripts and data stored in the weekly folders:
Week 1: For week 1 practicals -- including UNIX, shell scripts, LaTeX

Week 2: For week 2 practicals -- Python I scripts

Week 3: For week 3 practicals -- R and data visualization

Week 7: For week 7 practicals -- Python II 

MiniProject: For MiniProject submission

************************************
#### Author name and contact:
Uva Fung uf21@imperial.ac.uk

**********************************************************************

======================================================================
Looking for the weekly directories...

Found 4 weekly directories: week1, week2, week3, week7

The Week7 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK7...

Found the following directories: code, data, sandbox, results

Found the following files: READMEweek7.md

Checking for readme file in weekly directory...

Found README in parent directory, named: READMEweek7.md

Printing contents of READMEweek7.md:

**********************************************************************
# CMEE CourseWork Week 7

This repository contains codes and data for Computational Methods in Ecology and Evolution (CMEE) week 7 coursework.
Instructions to run the codes can be found [here](https://mhasoba.github.io/TheMulQuaBio/intro.html).

Data required to run the coding scripts can be downloaded from the following [repository](https://github.com/mhasoba/TheMulQuaBio).

***

#### Languages:
Python 3.9.7

#### Interactive interface:
Jupyter Notebook, Python kernel and R kernel

***********
#### Dependencies:
A UNIX based Operating System is needed to run the projects. Linux and Mac OS are both possible options. Linux Ubuntu can be downloaded [here](https://ubuntu.com/)


******************
#### Installation:

###### Python 3.9.7 can be installed [here](https://www.python.org/downloads/release/python-397/)

###### Jupyter Notebook interface, Python and R kernels can be installed following the instructions [here](https://jupyter.readthedocs.io/en/latest/install.html)

***********

#### Project structure and usage:
This project contains four folders: code, data, results, sandbox; and a README file.

Code stores all the codes written for week 7 practicals. Data stores all the data needed to run the scripts stored in code. Results store the output of coding scripts. Sandbox is used for experimental purposes and is left empty.

###### Files in code:

    Python scripts --
        LV1.py: produce consumer resource dynamics figures
        oaks_debugme.py: runs a function that finds and returns oak species, with unit testing
        profileme.py: profiling code to speed up computational process
        profileme2.py: faster code profiling
        TestR.py: test the process of running R scripts from Python
        timeitme.py: compares the speed of loops, list comprehensions and join methods for strings

    R script --
        TestR.R: run by TestR.py to test running R scripts from Python

    Jupyter notebook --
        MyFirstJupyterNb.ipynb: running Python and R commands with Jupyter Notebook



###### Files in data:
    TestOaksData.csv


*****************
#### Author name and contact:
Uva Fung uf21@imperial.ac.uk

**********************************************************************

Results directory is empty - good! 

Found 8 code files: TestR.py, profileme.py, oaks_debugme.py, MyFirstJupyterNb.ipynb, profileme2.py, TestR.R, LV1.py, timeitme.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file TestR.py...

File contents are:

**********************************************************************
#!/user/bin/env python3
# Author: Uva Fung uf21@imperial.ac.uk
# Script: TestR.py.py
# Desc: Test the process of running R scripts from Python
# Date: Nov 17 2021

"""Test the process of running R scripts from Python"""

import subprocess
subprocess.Popen("Rscript --verbose TestR.R > ../results/TestR.Rout 2> ../results/TestR_errorFile.Rout", shell=True).wait() 
# error output being redirected to a new file


**********************************************************************

Testing TestR.py...

TestR.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.08860s

======================================================================
Inspecting script file profileme.py...

File contents are:

**********************************************************************
#!/user/bin/env python3
# Author: Uva Fung uf21@imperial.ac.uk
# Script: profileme.py
# Desc: profiling code to speed up computational process
# Date: Nov 16 2021

"""This script profile codes to speed up computational process"""

def my_squares(iters):
    """give a list of squared values"""
    out = []
    for i in range(iters):
        out.append(i ** 2)
    return out

def my_join(iters, string):
    """add a string separated by commas and spaces and repeat for a given number of times"""
    out = ''
    for i in range(iters):
        out += string.join(", ")
    return out

def run_my_funcs(x,y):
    """print the input values and outputs for functions my_square and my_join"""
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0

run_my_funcs(10000000,"My string")
**********************************************************************

Testing profileme.py...

profileme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 5.32337s

======================================================================
Inspecting script file oaks_debugme.py...

File contents are:

**********************************************************************
#!/user/bin/env python3
# Author: Uva Fung uf21@imperial.ac.uk
# Script: oaks_debugme.py
# Desc: runs a function that searches and returns oak species, with doctests for unit testing
# Date: Nov 16 2021

"""This script runs the is_an_oak function that finds and returns oak species"""

__author__ = 'Uva Fung uf21@imperial.ac.uk'
__version__ = '0.0.1'


import csv
import sys
import doctest # import doctest module

#Define function
def is_an_oak(name):
    """Find whether a species belongs to the Quercus genus
    
    >>> is_an_oak('Quercus robur')
    True

    >>> is_an_oak('Fraxinus excelsior')
    False

    >>> is_an_oak('Pinus sylvestris')
    False

    >>> is_an_oak('Quercus cerris')
    True

    >>> is_an_oak('Quercus petraea')
    True

    >>> is_an_oak('Quercus ')
    True

    >>> is_an_oak('Quercus abcsdecd')
    True

    >>> is_an_oak('Quercusabscd robur')
    False

    >>> is_an_oak('Quercas ')
    False

    >>> is_an_oak('Quercusss')
    False

    >>> is_an_oak('Happyquercusss')
    False

    
    """
    
    # define function to be tested
    return name.lower().startswith('quercus ')

def main(argv): 
    
    """print the genus of each species and save the oak species in a new csv output file"""

    f = open('../data/TestOaksData.csv','r')
    g = open('../results/JustOaksData.csv','w') # write the output in a new csv file
    taxa = list(csv.reader(f)) # read TestOaksData.csv as a list so that it can be used in indexing
    csvwrite = csv.writer(g)
    oaks = set()

    for row in taxa[1:]: # skip the first row as row 0 is a header
        print(row)
        print ("The genus is: ") 
        print(row[0] + '\n')
        if is_an_oak(row[0] + " "): # space added so that only "Quercus" genus would return true
            print('FOUND AN OAK!\n')
            csvwrite.writerow([row[0], row[1]])  
        else: 
            print('No oak found. If you believe it is an oak, check for spelling mistakes. The genus name of oak is spelled as Quercus.\n')  

    return 0
    
if (__name__ == "__main__"):
    status = main(sys.argv)

doctest.testmod()


**********************************************************************

Testing oaks_debugme.py...

oaks_debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
['Quercus', ' robur']
The genus is: 
Quercus

FOUND AN OAK!

['Fraxinus', ' excelsior']
The genus is: 
Fraxinus

No oak found. If you believe it is an oak, check for spelling mistakes. The genus name of oak is spelled as Quercus.

['Pinus', ' sylvestris']
The genus is: 
Pinus

No oak found. If you believe it is an oak, check for spelling mistakes. The genus name of oak is spelled as Quercus.

['Quercus', ' cerris']
The genus is: 
Quercus

FOUND AN OAK!

['Quercus', ' petraea']
The genus is: 
Quer
**********************************************************************

Code ran without errors

Time consumed = 0.05117s

======================================================================
Inspecting script file MyFirstJupyterNb.ipynb...

File contents are:

**********************************************************************
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4099eb0f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is python!\n"
     ]
    }
   ],
   "source": [
    "a = \"this is python!\"; print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8482c206",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is R!"
     ]
    }
   ],
   "source": [
    "a <- \"this is R!\"; cat(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "90468d28",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/63/tyc7772x5fsg2x3824tbkxdh0000gn/T/ipykernel_2912/799143421.py:4: DeprecationWarning: scipy.arange is deprecated and will be removed in SciPy 2.0.0, use numpy.arange instead\n",
      "  x = sc.arange(0, 5, 0.1); y = sc.sin(x)\n",
      "/var/folders/63/tyc7772x5fsg2x3824tbkxdh0000gn/T/ipykernel_2912/799143421.py:4: DeprecationWarning: scipy.sin is deprecated and will be removed in SciPy 2.0.0, use numpy.sin instead\n",
      "  x = sc.arange(0, 5, 0.1); y = sc.sin(x)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as p\n",
    "import scipy as sc\n",
    "\n",
    "x = sc.arange(0, 5, 0.1); y = sc.sin(x)\n",
    "p.plot(x, y); p.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cb688074",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Loading required package: ggplot2\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nAAAAAElFTkSuQmCC",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 150,
       "width": 198
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "require(ggplot2)\n",
    "library(repr)# to resize plot within jupyter - this package is part of IRKernel\n",
    "options(repr.plot.width=3.3,repr.plot.height=2.5)\n",
    "\n",
    "x <- seq(0, 5, 0.1); y <- sin(x)\n",
    "qplot(x, y, geom = \"line\") # large figure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0ca2174c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'1.3.4'"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "pd.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "11f17b03",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'1.7.2'"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import scipy as sc\n",
    "sc.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "91016c3f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.indexes.numeric.UInt64Index"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.UInt64Index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d20e8b8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "pd?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "348ecf81",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Genus</th>\n",
       "      <th>species</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Quercus</td>\n",
       "      <td>robur</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Fraxinus</td>\n",
       "      <td>excelsior</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Pinus</td>\n",
       "      <td>sylvestris</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Quercus</td>\n",
       "      <td>cerris</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Quercus</td>\n",
       "      <td>petraea</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Genus      species\n",
       "0   Quercus        robur\n",
       "1  Fraxinus    excelsior\n",
       "2     Pinus   sylvestris\n",
       "3   Quercus       cerris\n",
       "4   Quercus      petraea"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF = pd.read_csv('../data/TestOaksData.csv', sep=',')\n",
    "MyDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "4afa5d1a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>col1</th>\n",
       "      <th>col2</th>\n",
       "      <th>col3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Var1</td>\n",
       "      <td>Grass</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Var2</td>\n",
       "      <td>Rabbit</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Var3</td>\n",
       "      <td>Fox</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Var4</td>\n",
       "      <td>Wolf</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   col1    col2  col3\n",
       "0  Var1   Grass   1.0\n",
       "1  Var2  Rabbit   2.0\n",
       "2  Var3     Fox   NaN\n",
       "3  Var4    Wolf   4.0"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF = pd.DataFrame({\n",
    "   'col1': ['Var1', 'Var2', 'Var3', 'Var4'],\n",
    "   'col2': ['Grass', 'Rabbit', 'Fox', 'Wolf'],\n",
    "   'col3': [1, 2, sc.nan, 4]\n",
    "})\n",
    "\n",
    "MyDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ff82941d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>col1</th>\n",
       "      <th>col2</th>\n",
       "      <th>col3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Var1</td>\n",
       "      <td>Grass</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Var2</td>\n",
       "      <td>Rabbit</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Var3</td>\n",
       "      <td>Fox</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Var4</td>\n",
       "      <td>Wolf</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   col1    col2  col3\n",
       "0  Var1   Grass   1.0\n",
       "1  Var2  Rabbit   2.0\n",
       "2  Var3     Fox   NaN\n",
       "3  Var4    Wolf   4.0"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e772f3ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>col1</th>\n",
       "      <th>col2</th>\n",
       "      <th>col3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Var1</td>\n",
       "      <td>Grass</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Var2</td>\n",
       "      <td>Rabbit</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Var3</td>\n",
       "      <td>Fox</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Var4</td>\n",
       "      <td>Wolf</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   col1    col2  col3\n",
       "0  Var1   Grass   1.0\n",
       "1  Var2  Rabbit   2.0\n",
       "2  Var3     Fox   NaN\n",
       "3  Var4    Wolf   4.0"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7b5dfd4b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4, 3)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "deef766f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(MyDF) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "89b5f2a8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['col1', 'col2', 'col3'], dtype='object')"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF.columns "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c21fb28a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "col1     object\n",
       "col2     object\n",
       "col3    float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c994f41d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([['Var1', 'Grass', 1.0],\n",
       "       ['Var2', 'Rabbit', 2.0],\n",
       "       ['Var3', 'Fox', nan],\n",
       "       ['Var4', 'Wolf', 4.0]], dtype=object)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF.values "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "8b9dfedf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>col3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.527525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           col3\n",
       "count  3.000000\n",
       "mean   2.333333\n",
       "std    1.527525\n",
       "min    1.000000\n",
       "25%    1.500000\n",
       "50%    2.000000\n",
       "75%    3.000000\n",
       "max    4.000000"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "9e9115bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "af62460d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sympy import *\n",
    "import scipy as sc\n",
    "init_printing() # for pretty-printing equations etc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "7cb9f85e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "sympy.core.symbol.Symbol"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = var('x')\n",
    "type(x) # check it's class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "18369ab5",
   "metadata": {},
   "outputs": [],
   "source": [
    "a, b, c = var(\"a, b, c\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "e49ac9c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = var('x', real=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "7ea36790",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.is_imaginary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "a9df2add",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Symbol('x', positive=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "8112be85",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAACoAAAAOCAYAAABZ/o57AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAB0UlEQVRIDb2W7U0CQRCGD0IBqB1oBxAqEDuA2IF0oH/5Z6ADtAKFDqAEpAOxA0MH+Dzn7uVyhFNAb5JhZudj592vOWrb7TYZDodvSZI04Q38GWQLKWlbw/rPg1yTc4NeGTVCJUH1KT6LldHv0UfwAP0pZ++hP8dxVbIOCHdqlgdZVjzELcti/sNXZ1KPc37g5KuwwAPTjg8XqDvqHTyE3gl2gZVRg51ZHVHNhU3JvUQ+wo47cBfuwy7ee6x/QZy2BHmHGMBpHuOx9kiMtT/AbsQF3MRmfFL351Ai2eLtkHcV5ATpo+zi82rot4MIOiVsPsprOLN9e9JFmGv3GRE3hlPASG3HATUxkEAE5mN0V8+QWYdgvHOl8G9CblFMMbyGeVIfujveQvZieyom/XZs0QxMCYjS+chzNz32dPcKwV7NzqlAndNdPZUEKbUB7T3Ok1dq+RdA9x1lvthPejyVOUCzj04+qZ4fVKEDJO5eVg6bx+uCbzNjTsHfPRVok/nkfeSHpAjMFiYo20+e7AY+TP0ZMfYzvq75pyRSCLLn2cxNEISTLmDv4oQYW48++5vf/eh/wb5zbNi8Y5K90dhX+AOWlvizPzfoLsq2JMVeas31Fx2vogF49TMKAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$\\displaystyle \\text{True}$"
      ],
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x > 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "b9463dbc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAC0AAAAPCAYAAABwfkanAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACVUlEQVRIDdWW21FbMRCGZYYCGKgASsCkAkwHMHSQdJAMT/YbAx1AKgjQAVABIR3EHYS4A+f7BJvRuZhzDsMLO7NnV9K/F61WskfT6XQ3pXQCKzdh6e5Z5O8G3x041rZns9miWG9VwejvO6ztHeOjVuAbJkfL5TKb4XSCcgsb4KDu62X9mvl99F/19VVjsI+szZHvlvRaEWz+ordWkaBW/xts5YbQ0xBwH2yZdB/8FaChSffxOwjTmTQV3oHt64RsPYVBEd8BvN7Dh71ua+SESfxcG+RnRN4Mcss56LTPxsB4SfWrz/BxzPyYcSZ0T9R2/A3rf4O5L8j0atKFYfmaJOYPsT2Dx+j5LiAvGN87B68kcCZ5hqxcdsY5IQ3R3VT2hR7+v6I/wuO29piwcC1jKPftYbG72HXh98DtgYsKM8zkpoP0dQUmHoeE7gnr/7Ct0pU3FVDpLDtl7gZFTugGN5FK5VxrI/D690X5q470mb1Bj7azym7cp7JOPrWf2pKuA3XaIILkY2ZhE/4BPzRAqydsIX/Qos1sl0vYFomTsvW8NyVZwJ+dSWOYK1paMmcwf+2O0HO/I61QJ4EzqSekl0xO6CZ3gTSpaIlbxo3Y4tf8vIGi58oLasUzEey13nZzlQqCv2TOBO11W2ABH8MNYn1SJh0XI2TDoGMiKq19HPEqkxOC1+M4jiLso/sgTEoHjH2x5qPiD5OBDLyAw9h3151XiDlx9qR97HFqa7WiTz1mfTiOwI5tB7Fe2j9wkO+w7RBxE7q43D7IeKttofn/P0xh/RHkP0QG2/u59wGyAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$\\displaystyle \\text{False}$"
      ],
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x < 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "0fd91a9a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEgAAAAaCAYAAAAUqxq7AAAACXBIWXMAAA7EAAAOxAGVKw4bAAADRklEQVRYCe2Y0VEbMRCGDyYFeFKC04GJKwh0QJIKwB3g4cl+y5AOIBUkoQOTCiB0YEog14Hzf2dJs3c++3QhyMmZnVmvtNJpd//blXTeWywW2a7TdDrtCYNzh0PfyRPp81e7Do6L/0JgjDwWal+q/VP8Zt8rd1yeCpRDg8GF2n3pBi8ALVEhe+4MQKG597IHBSxCQ5lDBh1LrpaYlH6TCg/87402MWnuAHDEB8RdKjENnknHhK4R+wmxbSQHJNlzoHbO5FBiUoDaUHLMQNdIcQFQLnlVF5v0VM5YsjjNXH8JkDrcA35IFmlVt0AXdIqPo/udZJEdPib1AYej3SYHQI39PYi0YkIyklMcq6R+7Rt9JkeIkVjDncfZATiSBBlIvo0yTrHJZPILmZJl81h8ltKmj1V2e7F294USe89DgK37DWL9EBsmJXYkvln3gAAk9U7d+FDyREzNfnS6W825du0kQvYoE3zCt3V0pXnVUmIusRJzVGlzzL8Vz8XriO+Uz7Am3Iq/iA/VZ0PDQZxNRrLr7b2XURi/OFyKTdW1OabrwNFwESsvOIrIIIJ8rJstI7wl7xBTcjElSRZBr8V2vFA+14/84Y4WMlZ9ju5LyQcxm/6N5H2DfWJtBRBBEngd3WHcDPCm7qUr5kvyBjeS5nBy4HyVsJtpvO5NY2NlbekI3gJwJB0ZBA3FMWVDPCRFFJFBa8k5ZMfZ3D5ZRVNba9QBkElPJnLM+wCbliqN6zmyyb7YgXS2X5pvOpsSwkxbNtmDSLlGRGWcLGBe2JCl68HSbYMAfmYMx5YN/hJzFAEQKbeyuAt+5oBhMRziqm5L7lz9nMGUhG+yx/74zdo1vlp1tU0G2Riq46U+AFHT1G+VyBj40TlUQt05w6m2DQIcNubqy+H4bqJiH22a5MfZg76Kv3uFkdwX2PQAKZMzIzEZxabLlRzgQrkxJyEBhP1uwnSsL8RTuy+yyAq56/dc1+9B7PX7b8zbxqeGbPbF8zb+U2IQd5l4VItHnvxDeVRL5MmLNixA1rW7t3k0hewMhH2/a9Jlz6xtXD6DAJ6LWdK/PDCakIitdZWEfxRxVJsuxz1/Vv/R5Y01/kVSPHySXEtGH+8+jt/Eu3Ka1sxn6gAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$\\displaystyle \\left(x + \\pi\\right)^{2}$"
      ],
      "text/plain": [
       "       2\n",
       "(x + π) "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun = (pi + x)**2; MyFun"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "51ab3c4f",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/latex": [
       "$\\displaystyle 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068$"
      ],
      "text/plain": [
       "3.1415926535897932384626433832795028841971693993751058209749445923078164062862\n",
       "08998628034825342117068"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pi.evalf(n=100) # pi to a 100 places after decimal!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b79c0f9c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$\\displaystyle 3.1415926535897932384626433832795028841971693993751$"
      ],
      "text/plain": [
       "3.1415926535897932384626433832795028841971693993751"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N(pi, 50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0107684e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEgAAAAaCAYAAAAUqxq7AAAACXBIWXMAAA7EAAAOxAGVKw4bAAADRklEQVRYCe2Y0VEbMRCGDyYFeFKC04GJKwh0QJIKwB3g4cl+y5AOIBUkoQOTCiB0YEog14Hzf2dJs3c++3QhyMmZnVmvtNJpd//blXTeWywW2a7TdDrtCYNzh0PfyRPp81e7Do6L/0JgjDwWal+q/VP8Zt8rd1yeCpRDg8GF2n3pBi8ALVEhe+4MQKG597IHBSxCQ5lDBh1LrpaYlH6TCg/87402MWnuAHDEB8RdKjENnknHhK4R+wmxbSQHJNlzoHbO5FBiUoDaUHLMQNdIcQFQLnlVF5v0VM5YsjjNXH8JkDrcA35IFmlVt0AXdIqPo/udZJEdPib1AYej3SYHQI39PYi0YkIyklMcq6R+7Rt9JkeIkVjDncfZATiSBBlIvo0yTrHJZPILmZJl81h8ltKmj1V2e7F294USe89DgK37DWL9EBsmJXYkvln3gAAk9U7d+FDyREzNfnS6W825du0kQvYoE3zCt3V0pXnVUmIusRJzVGlzzL8Vz8XriO+Uz7Am3Iq/iA/VZ0PDQZxNRrLr7b2XURi/OFyKTdW1OabrwNFwESsvOIrIIIJ8rJstI7wl7xBTcjElSRZBr8V2vFA+14/84Y4WMlZ9ju5LyQcxm/6N5H2DfWJtBRBBEngd3WHcDPCm7qUr5kvyBjeS5nBy4HyVsJtpvO5NY2NlbekI3gJwJB0ZBA3FMWVDPCRFFJFBa8k5ZMfZ3D5ZRVNba9QBkElPJnLM+wCbliqN6zmyyb7YgXS2X5pvOpsSwkxbNtmDSLlGRGWcLGBe2JCl68HSbYMAfmYMx5YN/hJzFAEQKbeyuAt+5oBhMRziqm5L7lz9nMGUhG+yx/74zdo1vlp1tU0G2Riq46U+AFHT1G+VyBj40TlUQt05w6m2DQIcNubqy+H4bqJiH22a5MfZg76Kv3uFkdwX2PQAKZMzIzEZxabLlRzgQrkxJyEBhP1uwnSsL8RTuy+yyAq56/dc1+9B7PX7b8zbxqeGbPbF8zb+U2IQd5l4VItHnvxDeVRL5MmLNixA1rW7t3k0hewMhH2/a9Jlz6xtXD6DAJ6LWdK/PDCakIitdZWEfxRxVJsuxz1/Vv/R5Y01/kVSPHySXEtGH+8+jt/Eu3Ka1sxn6gAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$\\displaystyle \\left(x + \\pi\\right)^{2}$"
      ],
      "text/plain": [
       "       2\n",
       "(x + π) "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun = (pi + x)**2; MyFun"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

**********************************************************************

Testing MyFirstJupyterNb.ipynb...

======================================================================
Inspecting script file profileme2.py...

File contents are:

**********************************************************************
#!/user/bin/env python3
# Author: Uva Fung uf21@imperial.ac.uk
# Script: profileme2.py
# Desc: faster profiling code to speed up computational process
# Date: Nov 16 2021

"""This script tests the speed of list comprehensions and Python functions in profiling codes"""

def my_squares(iters):
    """give a list of squared values"""
    out = [i ** 2 for i in range(iters)]
    return out

def my_join(iters, string):
    """add a string separated by commas and spaces and repeat for a given number of times"""
    out = ''
    for i in range(iters):
        out += ", " + string
    return out

def run_my_funcs(x,y):
    """print the input values and produce outputs for functions my_square and my_join"""
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0

run_my_funcs(10000000,"My string")
**********************************************************************

Testing profileme2.py...

profileme2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 3.04504s

======================================================================
Inspecting script file TestR.R...

File contents are:

**********************************************************************
### # Author: Uva Fung uf21@imperial.ac.uk
# Script: TestR.R
# Desc: Testing the process of running R scripts from Python
# Date: Nov 17 2021

print("Hello, this is R!")

**********************************************************************

Testing TestR.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Hello, this is R!"

**********************************************************************

Code ran without errors

Time consumed = 0.05370s

======================================================================
Inspecting script file LV1.py...

File contents are:

**********************************************************************
#!/user/bin/env python3
# Author: Uva Fung uf21@imperial.ac.uk
# Script: LV1.py
# Desc: Consumer Resource Dynamics Figures
# Date: Nov 16 2021

"""This script produces consumer resource dynamics figures"""

### import necessary packages
import numpy as np
import scipy as sc
from scipy import stats # necessary for stats to run
import scipy.integrate as integrate # to calculate integration using scipy.integrate package
import matplotlib.pylab as p # to visualize the curve using matplotlib package

### Lotka-Volterra model equation
def dCR_dt(pops, t=0):
    """returns the growth rate of consumer and resource population at any given time step"""

    R = pops[0]
    C = pops[1]
    dRdt = r * R - a * R * C 
    dCdt = -z * C + e * a * R * C
    
    return np.array([dRdt, dCdt])

type(dCR_dt) # check that the equation is written as a function

### assign parameter values
r = 1. 
a = 0.1 
z = 1.5
e = 0.75
t = np.linspace(0, 15, 1000) # define time vector (time point from 0 to 15, using 1000 sub-divisions of time)

R0 = 10 # set initial for resource population (R at time 0 = 10)
C0 = 5  # set initial for consumer population (C at time 0 = 5)
RC0 = np.array([R0, C0])

### Calculate the integration of the Lotka Volterra equation, starting from the initial conditions
pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output=True) # integrate this system forward from the starting conditions
pops

type(infodict) # infodict is a dictionary with additional information
infodict.keys()
infodict['message'] # check whether the integration was successful

### Create figure for consumer-resource dynamics over time
f1 = p.figure() # open an empty figure

p.plot(t, pops[:,0], 'g-', label='Resource density') # Plot
p.plot(t, pops[:,1]  , 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('Time')
p.ylabel('Population density')
p.title('Consumer-Resource population dynamics')

f1.savefig('../results/LV_model.pdf') # save output as pdf


### Create figure for consumer density vs resource density
f2 = p.figure() # open an empty figure

p.plot(pops[:,0], pops[:,1], "r-") # plot(x-axis, y-axis, "r-" for red line)
p.grid()
p.xlabel('Resource density')
p.ylabel('Consumer density')
p.title('Consumer-Resource population dynamics')

f2.savefig('../results/LV1_model.pdf') # save output as pdf
**********************************************************************

Testing LV1.py...

LV1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 100

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.87190s

======================================================================
Inspecting script file timeitme.py...

File contents are:

**********************************************************************
#!/user/bin/env python3
# Author: Uva Fung uf21@imperial.ac.uk
# Script: profileme2.py
# Desc: figure out the best way to do something specific as part of a larger program (eg. particular command or a loop)
# Date: Nov 16 2021

"""This script compares the speed of loops/list comprehensions/join method for strings"""

##############################################################################
# loops vs. list comprehensions: which is faster?
##############################################################################

iters = 1000000

import timeit # import timeit module

from profileme import my_squares as my_squares_loops # import functions from another python file

from profileme2 import my_squares as my_squares_lc

##############################################################################
# loops vs. the join method for strings: which is faster?
##############################################################################

mystring = "my string"

from profileme import my_join as my_join_join

from profileme2 import my_join as my_join



### A possible approach to time the function
import time
start = time.time()
my_squares_loops(iters)
print("my_squares_loops takes %f s to run." % (time.time() - start))

start = time.time()
my_squares_lc(iters)
print("my_squares_lc takes %f s to run." % (time.time() - start))
**********************************************************************

Testing timeitme.py...

timeitme.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 


**********************************************************************
10000000 My string
10000000 My string
my_squares_loops takes 0.251001 s to run.
my_squares_lc takes 0.207436 s to run.

**********************************************************************

Code ran without errors

Time consumed = 8.69994s

======================================================================
======================================================================
Finished running scripts

Ran into 0 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 100

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!